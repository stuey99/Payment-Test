#!/usr/bin/php
<?php

if (php_sapi_name() !== 'cli') {
    exit;
}

class paymentDates {

    // Methods
    function isBankHoliday($date) {
        // Hard coded bank holiday dates

        if (date('d-m-Y',$date) == '08-05-2020') {
             return true;
        } else if (date('d-m-Y',$date) == '25-05-2020') {
             return true;
        } else if (date('d-m-Y',$date) == '31-08-2020') {
             return true;
        } else if (date('d-m-Y',$date) == '25-12-2020') {
             return true;
        } else if (date('d-m-Y',$date) == '26-12-2020') {
             return true;
        } else if (date('d-m-Y',$date) == '01-01-2021') {
         return true;
        } else if (date('d-m-Y',$date) == '02-04-2021') {
             return true;
        } else if (date('d-m-Y',$date) == '05-04-2021') {
             return true;
        } else if (date('d-m-Y',$date) == '03-05-2021') {
             return true;
        } else if (date('d-m-Y',$date) == '31-05-2021') {
             return true;
        } else if (date('d-m-Y',$date) == '30-08-2021') {
             return true;
        } else if (date('d-m-Y',$date) == '27-12-2021') {
             return true;
        } else if (date('d-m-Y',$date) == '28-12-2021') {
             return true;
        }
        return false;
     
     
     }

    function checkBonusDate($date) {

        // Check if date falls on a weekend, if so move date to next Tuesday
        if (date('N', $date) >= 6) {
            $date = strtotime('next tuesday', $date);
        } else if ($this->isBankHoliday($date)) {
        // Check if date falls on a bank holiday, if so move date to next Tuesday
            $date = strtotime('next tuesday', $date);
        }
        return $date;
    }
    
    
    function checkPaymentDate($date) {
        // Check if date falls on a weekend, if so move date to next Tuesday
        if (date('N', $date) >= 6) {
            $date = strtotime('last friday', $date);
        } else if ($this->isBankHoliday($date)) {
        // Check if date falls on a bank holiday, if so move date to next Tuesday
            $date = strtotime('last friday', $date);
        }
        return $date;
    }

    function writePaymentDates() {
        echo("Application started\n");

        // Create headings for CSV
        $list = array(array('Month','Pay Date','Bonus Date'));

        for ($x = 1; $x <= 12; $x++) {

            // Calculate 10th day in month for bonus
            $bonusDate = strtotime('first day of +' . $x . ' month');
            $bonusDate = strtotime('+9 days', $bonusDate);
            // move to following Tuesday if falls on weekend or bank holiday
            $bonusDate = $this->checkBonusDate($bonusDate);

            echo(date('d-m-Y',$bonusDate));
            echo("\n");
            
            // Calculate last day in month
            $paymentDate = strtotime('first day of +' . ($x + 1) . ' month');
            $paymentDate = strtotime('-1 days', $paymentDate);
            // move to previous Friday if falls on weekend or bank holiday 
            $paymentDate = $this->checkPaymentDate($paymentDate);

            
            echo(date('d-m-Y',$paymentDate));
            echo("\n");


            // Add line to array
            $line = array(date('M',$paymentDate),date('d-m-Y',$paymentDate),date('d-m-Y',$bonusDate));
            array_push($list, $line);
        }
        // Write file
        $this->writeFile($list);

        echo("Application completed\n");
    }

    function writeFile($fileList) {
        // Standard fputcsv command passing the array
        echo("Opening file\n");

        $fp = fopen('output.csv', 'w');
        foreach ($fileList as $fields) {
            fputcsv($fp, $fields);
        }
        echo("Closing file\n");

        fclose($fp);
    }



  }


$payment = new paymentDates();
$payment -> writePaymentDates();

?>